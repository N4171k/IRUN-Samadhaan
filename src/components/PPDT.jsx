import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { account } from '../lib/appwrite';
import Navbar from './Navbar';
import { ArrowLeft, Clock, Eye, EyeOff, RotateCcw, Play } from 'lucide-react';

function PPDT() {
  const navigate = useNavigate();
  const [userDetails, setUserDetails] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  
  // Test state
  const [isTestActive, setIsTestActive] = useState(false);
  const [timeRemaining, setTimeRemaining] = useState(240); // 4 minutes (240 seconds)
  const [imageTimeRemaining, setImageTimeRemaining] = useState(30); // 30 seconds for image display
  const [story, setStory] = useState('');
  const [currentImage, setCurrentImage] = useState(null);
  const [testCompleted, setTestCompleted] = useState(false);
  const [showInstructions, setShowInstructions] = useState(true);
  const [imageVisible, setImageVisible] = useState(true);
  const [usedImageIds, setUsedImageIds] = useState([]); // Track used images to ensure variety
  const [imageLoaded, setImageLoaded] = useState(false); // Track when image is fully loaded
  
  const timerRef = useRef(null);
  const imageTimerRef = useRef(null);
  const textareaRef = useRef(null);

  const FALLBACK_IMAGE = '/ppdt/fallback-bw.svg';

  // Curated AI generated images (served by Pollinations, CC0-friendly usage)
  const pollinationsBase = 'https://image.pollinations.ai/prompt/';
  const createPollinationsUrl = (prompt, seed) => `${pollinationsBase}${encodeURIComponent(prompt)}?width=640&height=480&seed=${seed}&nologo=true`;

  const ppdtImages = [
    {
      id: 1,
      description: 'Cadets debating near a damaged footbridge',
      prompt: 'hand-drawn black and white comic panel showing three cadets beside a damaged footbridge, backpacks, misty hillside, ambiguous tension, expressive ink lines, open ended story',
      imageUrl: createPollinationsUrl(
        'hand-drawn black and white comic panel showing three cadets beside a damaged footbridge, backpacks, misty hillside, ambiguous tension, expressive ink lines, open ended story',
        211
      ),
      
    },
    {
      id: 2,
      description: 'Night-time rescue scene with lantern light',
      prompt: 'monochrome hand drawn comic style scene of two cadets discovering an unconscious villager under lantern light, forest clearing, dramatic shadows, sketchbook feel, open narrative space',
      imageUrl: createPollinationsUrl(
        'monochrome hand drawn comic style scene of two cadets discovering an unconscious villager under lantern light, forest clearing, dramatic shadows, sketchbook feel, open narrative space',
        874
      ),
      attribution: 'Image generated by Pollinations AI (free to use).'
    },
    {
      id: 3,
      description: 'Riverbank coordination with stretcher team',
      prompt: 'black and white ink comic illustration of cadets coordinating at a riverbank with a stretcher and radio, distant villagers watching, moody clouds, unfinished details for creative interpretation',
      imageUrl: createPollinationsUrl(
        'black and white ink comic illustration of cadets coordinating at a riverbank with a stretcher and radio, distant villagers watching, moody clouds, unfinished details for creative interpretation',
        1542
      ),
      attribution: 'Image generated by Pollinations AI (free to use).'
    },
    {
      id: 4,
      description: 'Mountain rescue team planning operation',
      prompt: 'hand-drawn monochrome comic panel of cadets with climbing gear studying a map near mountain cliff, emergency backpacks, weather approaching, ambiguous mission details, sketch style',
      imageUrl: createPollinationsUrl(
        'hand-drawn monochrome comic panel of cadets with climbing gear studying a map near mountain cliff, emergency backpacks, weather approaching, ambiguous mission details, sketch style',
        2341
      ),
      attribution: 'Image generated by Pollinations AI (free to use).'
    },
    {
      id: 5,
      description: 'Village flooding evacuation scene',
      prompt: 'black and white comic style illustration of cadets helping villagers near flooded area with boats and sandbags, storm clouds, children and elderly present, open-ended scenario, ink drawing',
      imageUrl: createPollinationsUrl(
        'black and white comic style illustration of cadets helping villagers near flooded area with boats and sandbags, storm clouds, children and elderly present, open-ended scenario, ink drawing',
        3127
      ),
      attribution: 'Image generated by Pollinations AI (free to use).'
    },
    {
      id: 6,
      description: 'Desert training checkpoint challenge',
      prompt: 'monochrome hand drawn comic scene of cadets at desert checkpoint with vehicles and equipment, dust storm approaching, unclear obstacle ahead, military training context, sketch pad style',
      imageUrl: createPollinationsUrl(
        'monochrome hand drawn comic scene of cadets at desert checkpoint with vehicles and equipment, dust storm approaching, unclear obstacle ahead, military training context, sketch pad style',
        4598
      ),
      attribution: 'Image generated by Pollinations AI (free to use).'
    },
    {
      id: 7,
      description: 'Forest fire response coordination',
      prompt: 'black and white ink comic illustration of cadets coordinating forest fire response with radios and safety gear, smoke in background, villagers watching, open narrative possibilities',
      imageUrl: createPollinationsUrl(
        'black and white ink comic illustration of cadets coordinating forest fire response with radios and safety gear, smoke in background, villagers watching, open narrative possibilities',
        5773
      ),
      attribution: 'Image generated by Pollinations AI (free to use).'
    },
    {
      id: 8,
      description: 'Campus leadership meeting during crisis',
      prompt: 'hand-drawn monochrome comic panel showing cadets in discussion around a table with documents, serious expressions, institutional setting, problem-solving atmosphere, sketch style',
      imageUrl: createPollinationsUrl(
        'hand-drawn monochrome comic panel showing cadets in discussion around a table with documents, serious expressions, institutional setting, problem-solving atmosphere, sketch style',
        6891
      ),
      attribution: 'Image generated by Pollinations AI (free to use).'
    }
  ];

  useEffect(() => {
    async function fetchUser() {
      try {
        const user = await account.get();
        setUserDetails(user);
        setIsLoading(false);
      } catch (err) {
        console.error('User not logged in:', err);
        navigate('/login');
      }
    }
    fetchUser();
  }, [navigate]);

  useEffect(() => {
    if (isTestActive && timeRemaining > 0) {
      timerRef.current = setInterval(() => {
        setTimeRemaining(prev => {
          if (prev <= 1) {
            handleTestComplete();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isTestActive, timeRemaining]);

  // Image visibility timer (30 seconds) - only starts when image is loaded
  useEffect(() => {
    if (isTestActive && imageVisible && imageTimeRemaining > 0 && imageLoaded) {
      imageTimerRef.current = setInterval(() => {
        setImageTimeRemaining(prev => {
          if (prev <= 1) {
            setImageVisible(false);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }

    return () => {
      if (imageTimerRef.current) {
        clearInterval(imageTimerRef.current);
      }
    };
  }, [isTestActive, imageVisible, imageTimeRemaining, imageLoaded]);

  const handleLogout = async () => {
    try {
      await account.deleteSession('current');
    } catch {}
    navigate('/login');
  };

  const selectRandomImage = () => {
    // If all images have been used, reset the used list (except the last one to avoid immediate repeat)
    let availableImages = ppdtImages.filter(img => !usedImageIds.includes(img.id));
    
    // If no available images (all used), reset but exclude the current image to avoid immediate repeat
    if (availableImages.length === 0) {
      const currentImageId = currentImage?.id;
      availableImages = ppdtImages.filter(img => img.id !== currentImageId);
      
      // If still no available images (only one image total), just use all images
      if (availableImages.length === 0) {
        availableImages = ppdtImages;
      }
      
      // Reset used images list, but keep current image to avoid immediate repeat
      setUsedImageIds(currentImageId ? [currentImageId] : []);
    }
    
    const randomIndex = Math.floor(Math.random() * availableImages.length);
    const selectedImage = availableImages[randomIndex];
    
    // Add selected image to used list
    setUsedImageIds(prev => [...prev, selectedImage.id]);
    
    return selectedImage;
  };

  const startTest = () => {
    const selectedImage = selectRandomImage();
    setCurrentImage(selectedImage);
    setShowInstructions(false);
    setIsTestActive(true);
    setTimeRemaining(240); // 4 minutes
    setImageTimeRemaining(30); // 30 seconds for image display
    setStory('');
    setTestCompleted(false);
    setImageVisible(true);
    setImageLoaded(false); // Reset image loading state
    
    // Focus on textarea after a brief delay
    setTimeout(() => {
      if (textareaRef.current) {
        textareaRef.current.focus();
      }
    }, 100);
  };

  const handleTestComplete = () => {
    setIsTestActive(false);
    setTestCompleted(true);
    clearInterval(timerRef.current);
    clearInterval(imageTimerRef.current);
  };

  const resetTest = () => {
    setIsTestActive(false);
    setCurrentImage(null);
    setTimeRemaining(240);
    setImageTimeRemaining(30);
    setStory('');
    setTestCompleted(false);
    setShowInstructions(true);
    setImageVisible(true);
    setImageLoaded(false);
    clearInterval(timerRef.current);
    clearInterval(imageTimerRef.current);
    // Note: We don't reset usedImageIds here to maintain variety across multiple attempts
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleBackToSSB = () => {
    navigate('/ssb-drills');
  };

  const getTimeColor = () => {
    if (timeRemaining > 120) return 'text-green-600';
    if (timeRemaining > 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  if (isLoading) {
    return <div className="loading-container">Loading...</div>;
  }

  return (
    <div className="glassmorphic-dashboard-layout">
      {/* Aurora Background Effect */}
      <div className="dashboard-aurora"></div>
      
      {/* Floating Background Shapes */}
      <div className="dashboard-floating-shape shape-1"></div>
      <div className="dashboard-floating-shape shape-2"></div>
      <div className="dashboard-floating-shape shape-3"></div>
      <div className="dashboard-floating-shape shape-4"></div>
      <div className="dashboard-floating-shape shape-5"></div>
      
      {/* Sparkle Effects */}
      <div className="dashboard-sparkle sparkle-1"></div>
      <div className="dashboard-sparkle sparkle-2"></div>
      <div className="dashboard-sparkle sparkle-3"></div>

      <Navbar userDetails={userDetails} onLogout={handleLogout} />

      {/* Breadcrumb Navigation */}
      <div className="glassmorphic-breadcrumb-nav">
        <div className="glassmorphic-breadcrumb-container">
          <button 
            onClick={handleBackToSSB}
            className="glassmorphic-breadcrumb-btn"
          >
            <ArrowLeft className="w-4 h-4" />
            <span>Back to SSB Drills</span>
          </button>
          <span className="breadcrumb-separator">/</span>
          <span className="breadcrumb-current">Picture Perception & Description Test (PPDT)</span>
        </div>
      </div>

      {/* Main Content */}
      <div className="glassmorphic-dashboard-wrapper">
        <div className="glassmorphic-dashboard-card">
          {/* Floating particles inside card */}
          <div className="dashboard-particle particle-1"></div>
          <div className="dashboard-particle particle-2"></div>
          <div className="dashboard-particle particle-3"></div>

          <div className="glassmorphic-dashboard-content">
            {/* Test Header */}
            <div className="glassmorphic-test-header">
              <h1 className="test-page-title">
                Picture Perception & Description Test (PPDT)
                <span className="progress-sparkle"></span>
              </h1>
            </div>

          {/* Instructions */}
          {showInstructions && !testCompleted && (
            <section className="glassmorphic-cards-section">
              <div className="glassmorphic-card instruction-card">
                <div className="card-glow instruction-glow"></div>
                <div className="card-content">
                  <h2 className="instruction-title">
                    Instructions
                    <span className="instruction-sparkle"></span>
                  </h2>
                  <div className="instruction-content">
                  <p><strong>What is PPDT?</strong></p>
                  <p>Picture Perception and Description Test now shows you a softly blurred, AI-generated hand-drawn comic-style monochrome scene for 30 seconds, then you have 4 minutes to write a story based on what you perceived.</p>
                  
                  <ul className="list-disc list-inside space-y-2">
                    <li><strong>Observation Time:</strong> 30 seconds to observe the blurred hand-drawn monochrome scene</li>
                    <li><strong>Writing Time:</strong> 4 minutes (240 seconds) to write your story</li>
                    <li><strong>Story Elements:</strong> Include characters, their mood, action, and outcome</li>
                    <li>Write about what you see, not what you think you should see</li>
                    <li>Keep the story positive and action-oriented</li>
                    <li>Focus on leadership qualities and problem-solving</li>
                  </ul>

                  <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200 mt-4">
                    <h3 className="font-semibold text-yellow-800">Story Writing Tips:</h3>
                    <ul className="list-disc list-inside text-yellow-700 space-y-1 mt-2">
                      <li>Start with setting the scene</li>
                      <li>Introduce the characters and their relationship</li>
                      <li>Describe the situation or problem</li>
                      <li>Show how characters resolve the situation</li>
                      <li>End with a positive outcome</li>
                      <li>Use active voice and positive language</li>
                    </ul>
                  </div>

                    <div className="instruction-highlight">
                      <h3 className="highlight-title">What Assessors Look For:</h3>
                      <ul className="highlight-list">
                        <li>Perception of the image</li>
                        <li>Imagination and creativity</li>
                        <li>Positive thinking</li>
                        <li>Leadership orientation</li>
                        <li>Problem-solving approach</li>
                      </ul>
                    </div>
                  </div>
                  
                  <button 
                    onClick={startTest} 
                    className="glassmorphic-start-btn"
                  >
                    <Play className="w-5 h-5" />
                    <span>Start PPDT Test</span>
                  </button>
                </div>
              </div>
            </section>
          )}

          {/* Test Interface */}
          {isTestActive && (
            <div className="p-6">
              {/* Timer and Controls */}
              <div className="flex justify-between items-center mb-6 p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-6">
                  <div className={`flex items-center space-x-2 ${getTimeColor()} font-semibold`}>
                    <Clock className="w-5 h-5" />
                    <span>{formatTime(timeRemaining)}</span>
                  </div>
                  <div className="text-sm text-gray-600">
                    Total Time Remaining
                  </div>
                  
                  {imageVisible && (
                    <>
                      <div className="h-6 w-px bg-gray-300"></div>
                      <div className={`flex items-center space-x-2 font-semibold ${imageLoaded ? 'text-red-600' : 'text-orange-600'}`}>
                        <Eye className="w-5 h-5" />
                        <span>{imageLoaded ? formatTime(imageTimeRemaining) : 'Loading...'}</span>
                      </div>
                      <div className="text-sm text-gray-600">
                        {imageLoaded ? 'Image Time Left' : 'Waiting for Image'}
                      </div>
                    </>
                  )}
                </div>
                
                <div className="flex space-x-3">
                  <div className="text-sm text-gray-500 flex items-center">
                    {imageVisible ? (
                      imageLoaded ? (
                        <span className="text-green-600">Timer active - image will auto-hide</span>
                      ) : (
                        <span className="text-orange-600">Loading image - timer will start when ready</span>
                      )
                    ) : (
                      <span className="text-gray-600">Image hidden</span>
                    )}
                  </div>
                  
                  <button 
                    onClick={() => {
                      const newImage = selectRandomImage();
                      setCurrentImage(newImage);
                      setImageTimeRemaining(30);
                      setImageVisible(true);
                      setImageLoaded(false); // Reset loading state for new image
                    }}
                    className="flex items-center space-x-2 px-3 py-1 text-sm text-blue-600 hover:text-blue-800 transition-colors border border-blue-200 rounded"
                    disabled={!imageVisible}
                  >
                    <RotateCcw className="w-4 h-4" />
                    <span>New Image</span>
                  </button>
                  
                  <button 
                    onClick={resetTest}
                    className="flex items-center space-x-2 px-3 py-1 text-sm text-gray-600 hover:text-gray-800 transition-colors"
                  >
                    <RotateCcw className="w-4 h-4" />
                    <span>Reset</span>
                  </button>
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Image Section */}
                <div className="space-y-4">
                    <div className="bg-gray-50 rounded-lg p-4 border-2 border-dashed border-gray-300">
                    <h3 className="text-sm font-medium text-gray-700 mb-3">Observe the Image Carefully</h3>
                    
                    <div className="w-full h-64 bg-white rounded border flex items-center justify-center overflow-hidden transition-all duration-500 relative">
                      {imageVisible ? (
                        currentImage ? (
                          <div className="relative w-full h-full">
                            <img 
                              src={currentImage.imageUrl}
                              alt="AI generated hand-drawn PPDT scenario"
                              className={`w-full h-full object-contain transition-opacity duration-300 ${imageLoaded ? 'opacity-100' : 'opacity-50'}`}
                              style={{ filter: 'grayscale(100%) contrast(115%) blur(3px)' }}
                              loading="lazy"
                              onLoad={() => {
                                setImageLoaded(true);
                              }}
                              onError={(event) => {
                                event.currentTarget.onerror = null;
                                event.currentTarget.src = FALLBACK_IMAGE;
                                setImageLoaded(true); // Set loaded even on error so timer can start
                              }}
                            />
                            
                            {/* Loading Overlay */}
                            {!imageLoaded && (
                              <div className="absolute inset-0 flex items-center justify-center bg-white bg-opacity-75">
                                <div className="flex flex-col items-center space-y-2">
                                  <div className="w-8 h-8 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
                                  <span className="text-sm text-gray-600">Loading image...</span>
                                  <span className="text-xs text-gray-500">Timer will start when ready</span>
                                </div>
                              </div>
                            )}
                            
                            {/* Image Timer Overlay - only show when loaded */}
                            {imageLoaded && (
                              <div className="absolute top-2 right-2 bg-red-600 text-white px-2 py-1 rounded text-sm font-mono">
                                {formatTime(imageTimeRemaining)}
                              </div>
                            )}
                          </div>
                        ) : (
                          <div className="flex flex-col items-center space-y-2">
                            <div className="w-8 h-8 border-4 border-gray-200 border-t-gray-600 rounded-full animate-spin"></div>
                            <span className="text-gray-400 text-sm">Preparing image...</span>
                          </div>
                        )
                      ) : (
                        <div className="flex flex-col items-center justify-center text-gray-500">
                          <EyeOff className="w-12 h-12 mb-2" />
                          <span className="text-lg font-medium">Image Hidden</span>
                          <span className="text-sm">Continue writing your story from memory</span>
                        </div>
                      )}
                    </div>
                    
                    <p className="text-xs text-gray-500 mt-2">
                    </p>
                    {currentImage?.attribution && (
                      <p className="text-[11px] text-gray-400 mt-1">
                        {currentImage.attribution}
                      </p>
                    )}
                  </div>
                </div>

                {/* Story Writing Section */}
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Write Your Story Here
                    </label>
                    <textarea
                      ref={textareaRef}
                      value={story}
                      onChange={(e) => setStory(e.target.value)}
                      className="w-full h-64 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                      placeholder="Start writing your story based on what you perceive in the image..."
                    />
                    <div className="flex justify-between items-center mt-2">
                      <div className="text-xs text-gray-500">
                        Word count: {story.trim().split(/\s+/).filter(word => word.length > 0).length} words
                      </div>
                      <div className="text-xs text-gray-500">
                        Characters: {story.length}
                      </div>
                    </div>
                  </div>

                  <div className="bg-blue-50 p-3 rounded-lg">
                    <h4 className="text-sm font-medium text-blue-800 mb-2">Story Structure Reminder:</h4>
                    <ul className="text-xs text-blue-700 space-y-1">
                      <li>• Setting & Characters</li>
                      <li>• Situation/Problem</li>
                      <li>• Action taken</li>
                      <li>• Positive outcome</li>
                    </ul>
                  </div>
                </div>
              </div>

              {/* Complete Test Button */}
              <div className="mt-6 flex justify-center">
                <button 
                  onClick={handleTestComplete}
                  className="bg-green-600 text-white px-8 py-3 rounded-md hover:bg-green-700 transition-colors font-medium"
                >
                  Complete Test
                </button>
              </div>
            </div>
          )}

          {/* Test Results */}
          {testCompleted && (
            <div className="p-6">
              <div className="bg-green-50 rounded-lg p-6 border border-green-200">
                <h2 className="text-xl font-semibold text-green-900 mb-4">PPDT Test Completed!</h2>
                
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                  {/* Your Story */}
                  <div className="bg-white p-4 rounded-lg border">
                    <h3 className="font-semibold text-gray-800 mb-3">Your Story</h3>
                    <div className="bg-gray-50 p-3 rounded-md min-h-32 text-sm text-gray-700">
                      {story || <em className="text-gray-500">No story written</em>}
                    </div>
                    <div className="flex justify-between items-center mt-2 text-xs text-gray-500">
                      <span>Words: {story.trim().split(/\s+/).filter(word => word.length > 0).length}</span>
                      <span>Characters: {story.length}</span>
                    </div>
                  </div>

                  {/* Image Reference */}
                  <div className="bg-white p-4 rounded-lg border">
                    <h3 className="font-semibold text-gray-800 mb-3">Test Image</h3>
                    <div className="w-full h-40 bg-gray-50 rounded border flex items-center justify-center">
                      {currentImage && (
                        <img 
                          src={currentImage.imageUrl}
                          alt="AI generated hand-drawn PPDT scenario"
                          className="max-w-full max-h-full object-contain"
                          style={{ filter: 'grayscale(100%) contrast(115%) blur(3px)' }}
                          loading="lazy"
                          onError={(event) => {
                            event.currentTarget.onerror = null;
                            event.currentTarget.src = FALLBACK_IMAGE;
                          }}
                        />
                      )}
                    </div>
                    {currentImage?.attribution && (
                      <p className="text-[11px] text-gray-400 mt-2 text-right">
                        {currentImage.attribution}
                      </p>
                    )}
                  </div>
                </div>

                <div className="bg-white p-4 rounded-lg border mb-6">
                  <h3 className="font-semibold text-gray-800 mb-2">Next Steps</h3>
                  <p className="text-gray-700 text-sm mb-3">
                    Great job completing the PPDT! Your story will be used in the Group Discussion (GD) round where you'll discuss your perception with other candidates.
                  </p>
                  <div className="bg-yellow-50 p-3 rounded-lg border border-yellow-200">
                    <h4 className="text-sm font-medium text-yellow-800 mb-1">Prepare for Group Discussion:</h4>
                    <ul className="text-xs text-yellow-700 space-y-1">
                      <li>• Be ready to explain your story and perception</li>
                      <li>• Listen to others' stories respectfully</li>
                      <li>• Show leadership and confidence in discussion</li>
                      <li>• Maintain your viewpoint while being open to others</li>
                    </ul>
                  </div>
                </div>

                <div className="flex space-x-4">
                  <button 
                    onClick={resetTest}
                    className="flex items-center space-x-2 bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors"
                  >
                    <RotateCcw className="w-4 h-4" />
                    <span>Take Test Again</span>
                  </button>
                  
                  <button 
                    onClick={() => navigate('/gd')}
                    className="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 transition-colors"
                  >
                    Go to Group Discussion
                  </button>
                  
                  <button 
                    onClick={handleBackToSSB}
                    className="px-6 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
                  >
                    Back to SSB Drills
                  </button>
                </div>
              </div>
            </div>
          )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default PPDT;